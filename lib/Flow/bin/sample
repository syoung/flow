#!/usr/bin/env perl

=head2

    NAME    sample
    
    PURPOSE
  
      Generate a list of samples from files in a directory, print them to a TSV file and upload the file to a specified database table.

    USAGE
  
    sample <project> <table> <directory> <regex> [-h] 

    project    :   Name of project (e.g., maxquant)
    table      :   Name of table (e.g., loadsamples)
    directory  :   Location of input files
    regex      :   Regular expression to match files for inclusion among the samples
    --help        :   print this help message

  < option > denotes REQUIRED argument
  [ option ] denotes OPTIONAL argument

    EXAMPLE

sample maxquant copd \
/Users/kbsf633/localrepos/sdf-px-maxquant/conf/sql/sample.sql \
/Volumes/PPP_Data/Data/PXD001977.Sputum/raw.selected \
"\.raw$"

=cut

#### EXTERNAL MODULES
use Getopt::Long;
use Conf::Yaml;

use FindBin qw($Bin);
use lib "$Bin/../lib";

#### INTERNAL MODULES
use Sample;


if ( $#ARGV < 3 ) {
  print "Not enough arguments. Exiting\n";
  usage();
}

my $project     = shift @ARGV;
my $table       = shift @ARGV; 
my $sqlfile     = shift @ARGV;
my $directory   = shift @ARGV;
my $regex       = shift @ARGV;

print "project: $project\n";

my $tsvfile     = $sqlfile;
$tsvfile =~ s/\.sql$/tsv/.;

my $help;
my $log;
my $printlog;
GetOptions (
  'log=i'        => \$log,
  'printlog=i'   => \$printlog,
  'help'         => \$help);

if ( defined $help )  {  usage();  }

#### GET CONF
my $configfile = "$Bin/../../conf/config.yml";
my $conf = Conf::Yaml->new({
  inputfile   => $configfile,
  logfile    =>  $logfile,
  log      =>  2,
  printlog  =>  5
});

my $object = Sample->new({
  conf        =>  $conf,
  logfile     =>  $logfile,
  log         =>  $log,
  printlog    =>  $printlog
});

$object->loadSamples($username, $project, $table, $sqlfile, $tsvfile);

# #:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# #                  SUBROUTINES
# #:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


sub usage
{
    print `perldoc $0`;
  exit;
}
